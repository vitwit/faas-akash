version: 2.1

executors:
  golang:
    docker:
      - image: circleci/golang:1.13

commands:
  make:
    parameters:
      description:
        type: string
      target:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: << parameters.description >>
          command: |
            make << parameters.target >>

jobs:
  setup-dependencies:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Cache go modules
          command: make go-mod-cache
      - run:
          name: Build
          command: make build
      - run:
          name: Git garbage collection
          command: git gc
      - save_cache:
          name: "Save go modules cache"
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          name: "Save source code cache"
          key: go-src-v1-{{ .Revision }}
          paths:
            - ".git"

  test-cover:
    executor: golang
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: "Create a temp directory for artifacts"
          command: |
            mkdir -p /tmp/logs /tmp/artifacts
      - run:
          name: Run tests
          command: |
            go test -coverprofile=c.out
            go tool cover -html=c.out -o coverage.html
            mv coverage.html /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - "./"
      - store_artifacts:
          path: /tmp/artifacts

  upload-coverage:
    executor: golang
    steps:
      - attach_workspace:
          at: /tmp/artifacts
      - checkout
      - run:
          name: gather
          command: |
            echo "--> Concatenating profiles:"
            ls /tmp/artifacts/
            echo "mode: atomic" > coverage.txt
            for prof in $(ls /tmp/artifacts); do
              tail -n +2 /tmp/artifacts/"$prof" >> coverage.txt
            done
      - run:
          name: upload
          command: bash <(curl -s https://codecov.io/bash) -f coverage.txt

workflows:
  version: 2
  test-suite:
    jobs:
      - setup-dependencies:
          # This filter enables the job for tags
          filters:
            tags:
              only:
                - /^v.*/
      - test-cover:
          requires:
            - setup-dependencies
      - upload-coverage:
          requires:
            - test-cover
